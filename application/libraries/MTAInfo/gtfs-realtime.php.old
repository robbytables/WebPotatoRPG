<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// cmd line php -f protoc-gen-php.php  gtfs-realtime.proto -i ./
// Source: gtfs-realtime.proto
//   Date: 2011-08-23 07:08:46

// @@protoc_insertion_point(scope_file)

namespace transit_realtime {

  // @@protoc_insertion_point(scope_namespace)
  // @@protoc_insertion_point(namespace_transit_realtime)

  class FeedMessage extends \DrSlump\Protobuf\Message {

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'transit_realtime.FeedMessage');

      // required .transit_realtime.FeedHeader header = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "header";
      $f->type      = 11;
      $f->rule      = 2;
      $f->reference = '\transit_realtime\FeedHeader';
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_transit_realtime.FeedMessage:header)
      $descriptor->addField($f);

      // repeated .transit_realtime.FeedEntity entity = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "entity";
      $f->type      = 11;
      $f->rule      = 3;
      $f->reference = '\transit_realtime\FeedEntity';
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_transit_realtime.FeedMessage:entity)
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      // @@protoc_insertion_point(scope_descriptor)
      // @@protoc_insertion_point(descriptor_transit_realtime.FeedMessage)

      return $descriptor;
    }

    /**  @var \transit_realtime\FeedHeader */
    public $header = null;
    
    /**  @var \transit_realtime\FeedEntity[]  */
    public $entity = array();
    

    /**
     * Check if <header> has a value
     *
     * @return boolean
     */
    public function hasHeader(){
      return $this->_has(1);
    }
    
    /**
     * Clear <header> value
     *
     * @return \transit_realtime\FeedMessage
     */
    public function clearHeader(){
      return $this->_clear(1);
    }
    
    /**
     * Get <header> value
     *
     * @return \transit_realtime\FeedHeader
     */
    public function getHeader(){
      return $this->_get(1);
    }
    
    /**
     * Set <header> value
     *
     * @param \transit_realtime\FeedHeader $value
     * @return \transit_realtime\FeedMessage
     */
    public function setHeader(\transit_realtime\FeedHeader $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <entity> has a value
     *
     * @return boolean
     */
    public function hasEntity(){
      return $this->_has(2);
    }
    
    /**
     * Clear <entity> value
     *
     * @return \transit_realtime\FeedMessage
     */
    public function clearEntity(){
      return $this->_clear(2);
    }
    
    /**
     * Get <entity> value
     *
     * @param int $idx
     * @return \transit_realtime\FeedEntity
     */
    public function getEntity($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <entity> value
     *
     * @param \transit_realtime\FeedEntity $value
     * @return \transit_realtime\FeedMessage
     */
    public function setEntity(\transit_realtime\FeedEntity $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <entity>
     *
     * @return \transit_realtime\FeedEntity[]
     */
    public function getEntityList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <entity>
     *
     * @param \transit_realtime\FeedEntity $value
     * @return \transit_realtime\FeedMessage
     */
    public function addEntity(\transit_realtime\FeedEntity $value){
     return $this->_add(2, $value);
    }
    

    // @@protoc_insertion_point(scope_class)
    // @@protoc_insertion_point(class_transit_realtime.FeedMessage)
  }
}

namespace transit_realtime\FeedHeader {

  // @@protoc_insertion_point(scope_namespace)
  // @@protoc_insertion_point(namespace_transit_realtime.FeedHeader)

  class Incrementality {
    const FULL_DATASET = 0;
    const DIFFERENTIAL = 1;

    // @@protoc_insertion_point(scope_class)
    // @@protoc_insertion_point(class_transit_realtime.FeedHeader.Incrementality)
  }
}
namespace transit_realtime {

  // @@protoc_insertion_point(scope_namespace)
  // @@protoc_insertion_point(namespace_transit_realtime)

  class FeedHeader extends \DrSlump\Protobuf\Message {

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'transit_realtime.FeedHeader');

      // required  gtfs_realtime_version = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "gtfs_realtime_version";
      $f->type      = 9;
      $f->rule      = 2;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_transit_realtime.FeedHeader:gtfs_realtime_version)
      $descriptor->addField($f);

      // optional .transit_realtime.FeedHeader.Incrementality incrementality = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "incrementality";
      $f->type      = 14;
      $f->rule      = 1;
      $f->reference = '\transit_realtime\FeedHeader\Incrementality';
      $f->default   = \transit_realtime\FeedHeader\Incrementality::FULL_DATASET;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_transit_realtime.FeedHeader:incrementality)
      $descriptor->addField($f);

      // optional  timestamp = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "timestamp";
      $f->type      = 4;
      $f->rule      = 1;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_transit_realtime.FeedHeader:timestamp)
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      // @@protoc_insertion_point(scope_descriptor)
      // @@protoc_insertion_point(descriptor_transit_realtime.FeedHeader)

      return $descriptor;
    }

    /**  @var string */
    public $gtfs_realtime_version = null;
    
    /**  @var int - \transit_realtime\FeedHeader\Incrementality */
    public $incrementality = \transit_realtime\FeedHeader\Incrementality::FULL_DATASET;
    
    /**  @var int */
    public $timestamp = null;
    

    /**
     * Check if <gtfs_realtime_version> has a value
     *
     * @return boolean
     */
    public function hasGtfsRealtimeVersion(){
      return $this->_has(1);
    }
    
    /**
     * Clear <gtfs_realtime_version> value
     *
     * @return \transit_realtime\FeedHeader
     */
    public function clearGtfsRealtimeVersion(){
      return $this->_clear(1);
    }
    
    /**
     * Get <gtfs_realtime_version> value
     *
     * @return string
     */
    public function getGtfsRealtimeVersion(){
      return $this->_get(1);
    }
    
    /**
     * Set <gtfs_realtime_version> value
     *
     * @param string $value
     * @return \transit_realtime\FeedHeader
     */
    public function setGtfsRealtimeVersion( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <incrementality> has a value
     *
     * @return boolean
     */
    public function hasIncrementality(){
      return $this->_has(2);
    }
    
    /**
     * Clear <incrementality> value
     *
     * @return \transit_realtime\FeedHeader
     */
    public function clearIncrementality(){
      return $this->_clear(2);
    }
    
    /**
     * Get <incrementality> value
     *
     * @return int - \transit_realtime\FeedHeader\Incrementality
     */
    public function getIncrementality(){
      return $this->_get(2);
    }
    
    /**
     * Set <incrementality> value
     *
     * @param int - \transit_realtime\FeedHeader\Incrementality $value
     * @return \transit_realtime\FeedHeader
     */
    public function setIncrementality( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <timestamp> has a value
     *
     * @return boolean
     */
    public function hasTimestamp(){
      return $this->_has(3);
    }
    
    /**
     * Clear <timestamp> value
     *
     * @return \transit_realtime\FeedHeader
     */
    public function clearTimestamp(){
      return $this->_clear(3);
    }
    
    /**
     * Get <timestamp> value
     *
     * @return int
     */
    public function getTimestamp(){
      return $this->_get(3);
    }
    
    /**
     * Set <timestamp> value
     *
     * @param int $value
     * @return \transit_realtime\FeedHeader
     */
    public function setTimestamp( $value){
      return $this->_set(3, $value);
    }
    

    // @@protoc_insertion_point(scope_class)
    // @@protoc_insertion_point(class_transit_realtime.FeedHeader)
  }
}

namespace transit_realtime {

  // @@protoc_insertion_point(scope_namespace)
  // @@protoc_insertion_point(namespace_transit_realtime)

  class FeedEntity extends \DrSlump\Protobuf\Message {

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'transit_realtime.FeedEntity');

      // required  id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = 9;
      $f->rule      = 2;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_transit_realtime.FeedEntity:id)
      $descriptor->addField($f);

      // optional  is_deleted = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "is_deleted";
      $f->type      = 8;
      $f->rule      = 1;
      $f->default   = false;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_transit_realtime.FeedEntity:is_deleted)
      $descriptor->addField($f);

      // optional .transit_realtime.TripUpdate trip_update = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "trip_update";
      $f->type      = 11;
      $f->rule      = 1;
      $f->reference = '\transit_realtime\TripUpdate';
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_transit_realtime.FeedEntity:trip_update)
      $descriptor->addField($f);

      // optional .transit_realtime.VehiclePosition vehicle = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "vehicle";
      $f->type      = 11;
      $f->rule      = 1;
      $f->reference = '\transit_realtime\VehiclePosition';
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_transit_realtime.FeedEntity:vehicle)
      $descriptor->addField($f);

      // optional .transit_realtime.Alert alert = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "alert";
      $f->type      = 11;
      $f->rule      = 1;
      $f->reference = '\transit_realtime\Alert';
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_transit_realtime.FeedEntity:alert)
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      // @@protoc_insertion_point(scope_descriptor)
      // @@protoc_insertion_point(descriptor_transit_realtime.FeedEntity)

      return $descriptor;
    }

    /**  @var string */
    public $id = null;
    
    /**  @var boolean */
    public $is_deleted = true;
    
    /**  @var \transit_realtime\TripUpdate */
    public $trip_update = null;
    
    /**  @var \transit_realtime\VehiclePosition */
    public $vehicle = null;
    
    /**  @var \transit_realtime\Alert */
    public $alert = null;
    

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \transit_realtime\FeedEntity
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return string
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param string $value
     * @return \transit_realtime\FeedEntity
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <is_deleted> has a value
     *
     * @return boolean
     */
    public function hasIsDeleted(){
      return $this->_has(2);
    }
    
    /**
     * Clear <is_deleted> value
     *
     * @return \transit_realtime\FeedEntity
     */
    public function clearIsDeleted(){
      return $this->_clear(2);
    }
    
    /**
     * Get <is_deleted> value
     *
     * @return boolean
     */
    public function getIsDeleted(){
      return $this->_get(2);
    }
    
    /**
     * Set <is_deleted> value
     *
     * @param boolean $value
     * @return \transit_realtime\FeedEntity
     */
    public function setIsDeleted( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <trip_update> has a value
     *
     * @return boolean
     */
    public function hasTripUpdate(){
      return $this->_has(3);
    }
    
    /**
     * Clear <trip_update> value
     *
     * @return \transit_realtime\FeedEntity
     */
    public function clearTripUpdate(){
      return $this->_clear(3);
    }
    
    /**
     * Get <trip_update> value
     *
     * @return \transit_realtime\TripUpdate
     */
    public function getTripUpdate(){
      return $this->_get(3);
    }
    
    /**
     * Set <trip_update> value
     *
     * @param \transit_realtime\TripUpdate $value
     * @return \transit_realtime\FeedEntity
     */
    public function setTripUpdate(\transit_realtime\TripUpdate $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <vehicle> has a value
     *
     * @return boolean
     */
    public function hasVehicle(){
      return $this->_has(4);
    }
    
    /**
     * Clear <vehicle> value
     *
     * @return \transit_realtime\FeedEntity
     */
    public function clearVehicle(){
      return $this->_clear(4);
    }
    
    /**
     * Get <vehicle> value
     *
     * @return \transit_realtime\VehiclePosition
     */
    public function getVehicle(){
      return $this->_get(4);
    }
    
    /**
     * Set <vehicle> value
     *
     * @param \transit_realtime\VehiclePosition $value
     * @return \transit_realtime\FeedEntity
     */
    public function setVehicle(\transit_realtime\VehiclePosition $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <alert> has a value
     *
     * @return boolean
     */
    public function hasAlert(){
      return $this->_has(5);
    }
    
    /**
     * Clear <alert> value
     *
     * @return \transit_realtime\FeedEntity
     */
    public function clearAlert(){
      return $this->_clear(5);
    }
    
    /**
     * Get <alert> value
     *
     * @return \transit_realtime\Alert
     */
    public function getAlert(){
      return $this->_get(5);
    }
    
    /**
     * Set <alert> value
     *
     * @param \transit_realtime\Alert $value
     * @return \transit_realtime\FeedEntity
     */
    public function setAlert(\transit_realtime\Alert $value){
      return $this->_set(5, $value);
    }
    

    // @@protoc_insertion_point(scope_class)
    // @@protoc_insertion_point(class_transit_realtime.FeedEntity)
  }
}

namespace transit_realtime\TripUpdate {

  // @@protoc_insertion_point(scope_namespace)
  // @@protoc_insertion_point(namespace_transit_realtime.TripUpdate)

  class StopTimeEvent extends \DrSlump\Protobuf\Message {

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'transit_realtime.TripUpdate.StopTimeEvent');

      // optional  delay = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "delay";
      $f->type      = 5;
      $f->rule      = 1;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_transit_realtime.TripUpdate.StopTimeEvent:delay)
      $descriptor->addField($f);

      // optional  time = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "time";
      $f->type      = 3;
      $f->rule      = 1;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_transit_realtime.TripUpdate.StopTimeEvent:time)
      $descriptor->addField($f);

      // optional  uncertainty = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "uncertainty";
      $f->type      = 5;
      $f->rule      = 1;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_transit_realtime.TripUpdate.StopTimeEvent:uncertainty)
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      // @@protoc_insertion_point(scope_descriptor)
      // @@protoc_insertion_point(descriptor_transit_realtime.TripUpdate.StopTimeEvent)

      return $descriptor;
    }

    /**  @var int */
    public $delay = null;
    
    /**  @var int */
    public $time = null;
    
    /**  @var int */
    public $uncertainty = null;
    

    /**
     * Check if <delay> has a value
     *
     * @return boolean
     */
    public function hasDelay(){
      return $this->_has(1);
    }
    
    /**
     * Clear <delay> value
     *
     * @return \transit_realtime\TripUpdate\StopTimeEvent
     */
    public function clearDelay(){
      return $this->_clear(1);
    }
    
    /**
     * Get <delay> value
     *
     * @return int
     */
    public function getDelay(){
      return $this->_get(1);
    }
    
    /**
     * Set <delay> value
     *
     * @param int $value
     * @return \transit_realtime\TripUpdate\StopTimeEvent
     */
    public function setDelay( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <time> has a value
     *
     * @return boolean
     */
    public function hasTime(){
      return $this->_has(2);
    }
    
    /**
     * Clear <time> value
     *
     * @return \transit_realtime\TripUpdate\StopTimeEvent
     */
    public function clearTime(){
      return $this->_clear(2);
    }
    
    /**
     * Get <time> value
     *
     * @return int
     */
    public function getTime(){
      return $this->_get(2);
    }
    
    /**
     * Set <time> value
     *
     * @param int $value
     * @return \transit_realtime\TripUpdate\StopTimeEvent
     */
    public function setTime( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <uncertainty> has a value
     *
     * @return boolean
     */
    public function hasUncertainty(){
      return $this->_has(3);
    }
    
    /**
     * Clear <uncertainty> value
     *
     * @return \transit_realtime\TripUpdate\StopTimeEvent
     */
    public function clearUncertainty(){
      return $this->_clear(3);
    }
    
    /**
     * Get <uncertainty> value
     *
     * @return int
     */
    public function getUncertainty(){
      return $this->_get(3);
    }
    
    /**
     * Set <uncertainty> value
     *
     * @param int $value
     * @return \transit_realtime\TripUpdate\StopTimeEvent
     */
    public function setUncertainty( $value){
      return $this->_set(3, $value);
    }
    

    // @@protoc_insertion_point(scope_class)
    // @@protoc_insertion_point(class_transit_realtime.TripUpdate.StopTimeEvent)
  }
}

namespace transit_realtime\TripUpdate\StopTimeUpdate {

  // @@protoc_insertion_point(scope_namespace)
  // @@protoc_insertion_point(namespace_transit_realtime.TripUpdate.StopTimeUpdate)

  class ScheduleRelationship {
    const SCHEDULED = 0;
    const SKIPPED = 1;
    const NO_DATA = 2;

    // @@protoc_insertion_point(scope_class)
    // @@protoc_insertion_point(class_transit_realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship)
  }
}
namespace transit_realtime\TripUpdate {

  // @@protoc_insertion_point(scope_namespace)
  // @@protoc_insertion_point(namespace_transit_realtime.TripUpdate)

  class StopTimeUpdate extends \DrSlump\Protobuf\Message {

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'transit_realtime.TripUpdate.StopTimeUpdate');

      // optional  stop_sequence = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "stop_sequence";
      $f->type      = 13;
      $f->rule      = 1;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_transit_realtime.TripUpdate.StopTimeUpdate:stop_sequence)
      $descriptor->addField($f);

      // optional  stop_id = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "stop_id";
      $f->type      = 9;
      $f->rule      = 1;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_transit_realtime.TripUpdate.StopTimeUpdate:stop_id)
      $descriptor->addField($f);

      // optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "arrival";
      $f->type      = 11;
      $f->rule      = 1;
      $f->reference = '\transit_realtime\TripUpdate\StopTimeEvent';
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_transit_realtime.TripUpdate.StopTimeUpdate:arrival)
      $descriptor->addField($f);

      // optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "departure";
      $f->type      = 11;
      $f->rule      = 1;
      $f->reference = '\transit_realtime\TripUpdate\StopTimeEvent';
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_transit_realtime.TripUpdate.StopTimeUpdate:departure)
      $descriptor->addField($f);

      // optional .transit_realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship schedule_relationship = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "schedule_relationship";
      $f->type      = 14;
      $f->rule      = 1;
      $f->reference = '\transit_realtime\TripUpdate\StopTimeUpdate\ScheduleRelationship';
      $f->default   = \transit_realtime\TripUpdate\StopTimeUpdate\ScheduleRelationship::SCHEDULED;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_transit_realtime.TripUpdate.StopTimeUpdate:schedule_relationship)
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      // @@protoc_insertion_point(scope_descriptor)
      // @@protoc_insertion_point(descriptor_transit_realtime.TripUpdate.StopTimeUpdate)

      return $descriptor;
    }

    /**  @var int */
    public $stop_sequence = null;
    
    /**  @var string */
    public $stop_id = null;
    
    /**  @var \transit_realtime\TripUpdate\StopTimeEvent */
    public $arrival = null;
    
    /**  @var \transit_realtime\TripUpdate\StopTimeEvent */
    public $departure = null;
    
    /**  @var int - \transit_realtime\TripUpdate\StopTimeUpdate\ScheduleRelationship */
    public $schedule_relationship = \transit_realtime\TripUpdate\StopTimeUpdate\ScheduleRelationship::SCHEDULED;
    

    /**
     * Check if <stop_sequence> has a value
     *
     * @return boolean
     */
    public function hasStopSequence(){
      return $this->_has(1);
    }
    
    /**
     * Clear <stop_sequence> value
     *
     * @return \transit_realtime\TripUpdate\StopTimeUpdate
     */
    public function clearStopSequence(){
      return $this->_clear(1);
    }
    
    /**
     * Get <stop_sequence> value
     *
     * @return int
     */
    public function getStopSequence(){
      return $this->_get(1);
    }
    
    /**
     * Set <stop_sequence> value
     *
     * @param int $value
     * @return \transit_realtime\TripUpdate\StopTimeUpdate
     */
    public function setStopSequence( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <stop_id> has a value
     *
     * @return boolean
     */
    public function hasStopId(){
      return $this->_has(4);
    }
    
    /**
     * Clear <stop_id> value
     *
     * @return \transit_realtime\TripUpdate\StopTimeUpdate
     */
    public function clearStopId(){
      return $this->_clear(4);
    }
    
    /**
     * Get <stop_id> value
     *
     * @return string
     */
    public function getStopId(){
      return $this->_get(4);
    }
    
    /**
     * Set <stop_id> value
     *
     * @param string $value
     * @return \transit_realtime\TripUpdate\StopTimeUpdate
     */
    public function setStopId( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <arrival> has a value
     *
     * @return boolean
     */
    public function hasArrival(){
      return $this->_has(2);
    }
    
    /**
     * Clear <arrival> value
     *
     * @return \transit_realtime\TripUpdate\StopTimeUpdate
     */
    public function clearArrival(){
      return $this->_clear(2);
    }
    
    /**
     * Get <arrival> value
     *
     * @return \transit_realtime\TripUpdate\StopTimeEvent
     */
    public function getArrival(){
      return $this->_get(2);
    }
    
    /**
     * Set <arrival> value
     *
     * @param \transit_realtime\TripUpdate\StopTimeEvent $value
     * @return \transit_realtime\TripUpdate\StopTimeUpdate
     */
    public function setArrival(\transit_realtime\TripUpdate\StopTimeEvent $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <departure> has a value
     *
     * @return boolean
     */
    public function hasDeparture(){
      return $this->_has(3);
    }
    
    /**
     * Clear <departure> value
     *
     * @return \transit_realtime\TripUpdate\StopTimeUpdate
     */
    public function clearDeparture(){
      return $this->_clear(3);
    }
    
    /**
     * Get <departure> value
     *
     * @return \transit_realtime\TripUpdate\StopTimeEvent
     */
    public function getDeparture(){
      return $this->_get(3);
    }
    
    /**
     * Set <departure> value
     *
     * @param \transit_realtime\TripUpdate\StopTimeEvent $value
     * @return \transit_realtime\TripUpdate\StopTimeUpdate
     */
    public function setDeparture(\transit_realtime\TripUpdate\StopTimeEvent $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <schedule_relationship> has a value
     *
     * @return boolean
     */
    public function hasScheduleRelationship(){
      return $this->_has(5);
    }
    
    /**
     * Clear <schedule_relationship> value
     *
     * @return \transit_realtime\TripUpdate\StopTimeUpdate
     */
    public function clearScheduleRelationship(){
      return $this->_clear(5);
    }
    
    /**
     * Get <schedule_relationship> value
     *
     * @return int - \transit_realtime\TripUpdate\StopTimeUpdate\ScheduleRelationship
     */
    public function getScheduleRelationship(){
      return $this->_get(5);
    }
    
    /**
     * Set <schedule_relationship> value
     *
     * @param int - \transit_realtime\TripUpdate\StopTimeUpdate\ScheduleRelationship $value
     * @return \transit_realtime\TripUpdate\StopTimeUpdate
     */
    public function setScheduleRelationship( $value){
      return $this->_set(5, $value);
    }
    

    // @@protoc_insertion_point(scope_class)
    // @@protoc_insertion_point(class_transit_realtime.TripUpdate.StopTimeUpdate)
  }
}

namespace transit_realtime {

  // @@protoc_insertion_point(scope_namespace)
  // @@protoc_insertion_point(namespace_transit_realtime)

  class TripUpdate extends \DrSlump\Protobuf\Message {

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'transit_realtime.TripUpdate');

      // required .transit_realtime.TripDescriptor trip = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "trip";
      $f->type      = 11;
      $f->rule      = 2;
      $f->reference = '\transit_realtime\TripDescriptor';
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_transit_realtime.TripUpdate:trip)
      $descriptor->addField($f);

      // optional .transit_realtime.VehicleDescriptor vehicle = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "vehicle";
      $f->type      = 11;
      $f->rule      = 1;
      $f->reference = '\transit_realtime\VehicleDescriptor';
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_transit_realtime.TripUpdate:vehicle)
      $descriptor->addField($f);

      // repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "stop_time_update";
      $f->type      = 11;
      $f->rule      = 3;
      $f->reference = '\transit_realtime\TripUpdate\StopTimeUpdate';
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_transit_realtime.TripUpdate:stop_time_update)
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      // @@protoc_insertion_point(scope_descriptor)
      // @@protoc_insertion_point(descriptor_transit_realtime.TripUpdate)

      return $descriptor;
    }

    /**  @var \transit_realtime\TripDescriptor */
    public $trip = null;
    
    /**  @var \transit_realtime\VehicleDescriptor */
    public $vehicle = null;
    
    /**  @var \transit_realtime\TripUpdate\StopTimeUpdate[]  */
    public $stop_time_update = array();
    

    /**
     * Check if <trip> has a value
     *
     * @return boolean
     */
    public function hasTrip(){
      return $this->_has(1);
    }
    
    /**
     * Clear <trip> value
     *
     * @return \transit_realtime\TripUpdate
     */
    public function clearTrip(){
      return $this->_clear(1);
    }
    
    /**
     * Get <trip> value
     *
     * @return \transit_realtime\TripDescriptor
     */
    public function getTrip(){
      return $this->_get(1);
    }
    
    /**
     * Set <trip> value
     *
     * @param \transit_realtime\TripDescriptor $value
     * @return \transit_realtime\TripUpdate
     */
    public function setTrip(\transit_realtime\TripDescriptor $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <vehicle> has a value
     *
     * @return boolean
     */
    public function hasVehicle(){
      return $this->_has(3);
    }
    
    /**
     * Clear <vehicle> value
     *
     * @return \transit_realtime\TripUpdate
     */
    public function clearVehicle(){
      return $this->_clear(3);
    }
    
    /**
     * Get <vehicle> value
     *
     * @return \transit_realtime\VehicleDescriptor
     */
    public function getVehicle(){
      return $this->_get(3);
    }
    
    /**
     * Set <vehicle> value
     *
     * @param \transit_realtime\VehicleDescriptor $value
     * @return \transit_realtime\TripUpdate
     */
    public function setVehicle(\transit_realtime\VehicleDescriptor $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <stop_time_update> has a value
     *
     * @return boolean
     */
    public function hasStopTimeUpdate(){
      return $this->_has(2);
    }
    
    /**
     * Clear <stop_time_update> value
     *
     * @return \transit_realtime\TripUpdate
     */
    public function clearStopTimeUpdate(){
      return $this->_clear(2);
    }
    
    /**
     * Get <stop_time_update> value
     *
     * @param int $idx
     * @return \transit_realtime\TripUpdate\StopTimeUpdate
     */
    public function getStopTimeUpdate($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <stop_time_update> value
     *
     * @param \transit_realtime\TripUpdate\StopTimeUpdate $value
     * @return \transit_realtime\TripUpdate
     */
    public function setStopTimeUpdate(\transit_realtime\TripUpdate\StopTimeUpdate $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <stop_time_update>
     *
     * @return \transit_realtime\TripUpdate\StopTimeUpdate[]
     */
    public function getStopTimeUpdateList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <stop_time_update>
     *
     * @param \transit_realtime\TripUpdate\StopTimeUpdate $value
     * @return \transit_realtime\TripUpdate
     */
    public function addStopTimeUpdate(\transit_realtime\TripUpdate\StopTimeUpdate $value){
     return $this->_add(2, $value);
    }
    

    // @@protoc_insertion_point(scope_class)
    // @@protoc_insertion_point(class_transit_realtime.TripUpdate)
  }
}

namespace transit_realtime\VehiclePosition {

  // @@protoc_insertion_point(scope_namespace)
  // @@protoc_insertion_point(namespace_transit_realtime.VehiclePosition)

  class VehicleStopStatus {
    const INCOMING_AT = 0;
    const STOPPED_AT = 1;
    const IN_TRANSIT_TO = 2;

    // @@protoc_insertion_point(scope_class)
    // @@protoc_insertion_point(class_transit_realtime.VehiclePosition.VehicleStopStatus)
  }
}
namespace transit_realtime\VehiclePosition {

  // @@protoc_insertion_point(scope_namespace)
  // @@protoc_insertion_point(namespace_transit_realtime.VehiclePosition)

  class CongestionLevel {
    const UNKNOWN_CONGESTION_LEVEL = 0;
    const RUNNING_SMOOTHLY = 1;
    const STOP_AND_GO = 2;
    const CONGESTION = 3;
    const SEVERE_CONGESTION = 4;

    // @@protoc_insertion_point(scope_class)
    // @@protoc_insertion_point(class_transit_realtime.VehiclePosition.CongestionLevel)
  }
}
namespace transit_realtime {

  // @@protoc_insertion_point(scope_namespace)
  // @@protoc_insertion_point(namespace_transit_realtime)

  class VehiclePosition extends \DrSlump\Protobuf\Message {

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'transit_realtime.VehiclePosition');

      // optional .transit_realtime.TripDescriptor trip = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "trip";
      $f->type      = 11;
      $f->rule      = 1;
      $f->reference = '\transit_realtime\TripDescriptor';
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_transit_realtime.VehiclePosition:trip)
      $descriptor->addField($f);

      // optional .transit_realtime.VehicleDescriptor vehicle = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "vehicle";
      $f->type      = 11;
      $f->rule      = 1;
      $f->reference = '\transit_realtime\VehicleDescriptor';
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_transit_realtime.VehiclePosition:vehicle)
      $descriptor->addField($f);

      // optional .transit_realtime.Position position = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "position";
      $f->type      = 11;
      $f->rule      = 1;
      $f->reference = '\transit_realtime\Position';
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_transit_realtime.VehiclePosition:position)
      $descriptor->addField($f);

      // optional  current_stop_sequence = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "current_stop_sequence";
      $f->type      = 13;
      $f->rule      = 1;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_transit_realtime.VehiclePosition:current_stop_sequence)
      $descriptor->addField($f);

      // optional  stop_id = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "stop_id";
      $f->type      = 9;
      $f->rule      = 1;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_transit_realtime.VehiclePosition:stop_id)
      $descriptor->addField($f);

      // optional .transit_realtime.VehiclePosition.VehicleStopStatus current_status = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "current_status";
      $f->type      = 14;
      $f->rule      = 1;
      $f->reference = '\transit_realtime\VehiclePosition\VehicleStopStatus';
      $f->default   = \transit_realtime\VehiclePosition\VehicleStopStatus::IN_TRANSIT_TO;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_transit_realtime.VehiclePosition:current_status)
      $descriptor->addField($f);

      // optional  timestamp = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "timestamp";
      $f->type      = 4;
      $f->rule      = 1;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_transit_realtime.VehiclePosition:timestamp)
      $descriptor->addField($f);

      // optional .transit_realtime.VehiclePosition.CongestionLevel congestion_level = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "congestion_level";
      $f->type      = 14;
      $f->rule      = 1;
      $f->reference = '\transit_realtime\VehiclePosition\CongestionLevel';
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_transit_realtime.VehiclePosition:congestion_level)
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      // @@protoc_insertion_point(scope_descriptor)
      // @@protoc_insertion_point(descriptor_transit_realtime.VehiclePosition)

      return $descriptor;
    }

    /**  @var \transit_realtime\TripDescriptor */
    public $trip = null;
    
    /**  @var \transit_realtime\VehicleDescriptor */
    public $vehicle = null;
    
    /**  @var \transit_realtime\Position */
    public $position = null;
    
    /**  @var int */
    public $current_stop_sequence = null;
    
    /**  @var string */
    public $stop_id = null;
    
    /**  @var int - \transit_realtime\VehiclePosition\VehicleStopStatus */
    public $current_status = \transit_realtime\VehiclePosition\VehicleStopStatus::IN_TRANSIT_TO;
    
    /**  @var int */
    public $timestamp = null;
    
    /**  @var int - \transit_realtime\VehiclePosition\CongestionLevel */
    public $congestion_level = null;
    

    /**
     * Check if <trip> has a value
     *
     * @return boolean
     */
    public function hasTrip(){
      return $this->_has(1);
    }
    
    /**
     * Clear <trip> value
     *
     * @return \transit_realtime\VehiclePosition
     */
    public function clearTrip(){
      return $this->_clear(1);
    }
    
    /**
     * Get <trip> value
     *
     * @return \transit_realtime\TripDescriptor
     */
    public function getTrip(){
      return $this->_get(1);
    }
    
    /**
     * Set <trip> value
     *
     * @param \transit_realtime\TripDescriptor $value
     * @return \transit_realtime\VehiclePosition
     */
    public function setTrip(\transit_realtime\TripDescriptor $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <vehicle> has a value
     *
     * @return boolean
     */
    public function hasVehicle(){
      return $this->_has(8);
    }
    
    /**
     * Clear <vehicle> value
     *
     * @return \transit_realtime\VehiclePosition
     */
    public function clearVehicle(){
      return $this->_clear(8);
    }
    
    /**
     * Get <vehicle> value
     *
     * @return \transit_realtime\VehicleDescriptor
     */
    public function getVehicle(){
      return $this->_get(8);
    }
    
    /**
     * Set <vehicle> value
     *
     * @param \transit_realtime\VehicleDescriptor $value
     * @return \transit_realtime\VehiclePosition
     */
    public function setVehicle(\transit_realtime\VehicleDescriptor $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <position> has a value
     *
     * @return boolean
     */
    public function hasPosition(){
      return $this->_has(2);
    }
    
    /**
     * Clear <position> value
     *
     * @return \transit_realtime\VehiclePosition
     */
    public function clearPosition(){
      return $this->_clear(2);
    }
    
    /**
     * Get <position> value
     *
     * @return \transit_realtime\Position
     */
    public function getPosition(){
      return $this->_get(2);
    }
    
    /**
     * Set <position> value
     *
     * @param \transit_realtime\Position $value
     * @return \transit_realtime\VehiclePosition
     */
    public function setPosition(\transit_realtime\Position $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <current_stop_sequence> has a value
     *
     * @return boolean
     */
    public function hasCurrentStopSequence(){
      return $this->_has(3);
    }
    
    /**
     * Clear <current_stop_sequence> value
     *
     * @return \transit_realtime\VehiclePosition
     */
    public function clearCurrentStopSequence(){
      return $this->_clear(3);
    }
    
    /**
     * Get <current_stop_sequence> value
     *
     * @return int
     */
    public function getCurrentStopSequence(){
      return $this->_get(3);
    }
    
    /**
     * Set <current_stop_sequence> value
     *
     * @param int $value
     * @return \transit_realtime\VehiclePosition
     */
    public function setCurrentStopSequence( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <stop_id> has a value
     *
     * @return boolean
     */
    public function hasStopId(){
      return $this->_has(7);
    }
    
    /**
     * Clear <stop_id> value
     *
     * @return \transit_realtime\VehiclePosition
     */
    public function clearStopId(){
      return $this->_clear(7);
    }
    
    /**
     * Get <stop_id> value
     *
     * @return string
     */
    public function getStopId(){
      return $this->_get(7);
    }
    
    /**
     * Set <stop_id> value
     *
     * @param string $value
     * @return \transit_realtime\VehiclePosition
     */
    public function setStopId( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <current_status> has a value
     *
     * @return boolean
     */
    public function hasCurrentStatus(){
      return $this->_has(4);
    }
    
    /**
     * Clear <current_status> value
     *
     * @return \transit_realtime\VehiclePosition
     */
    public function clearCurrentStatus(){
      return $this->_clear(4);
    }
    
    /**
     * Get <current_status> value
     *
     * @return int - \transit_realtime\VehiclePosition\VehicleStopStatus
     */
    public function getCurrentStatus(){
      return $this->_get(4);
    }
    
    /**
     * Set <current_status> value
     *
     * @param int - \transit_realtime\VehiclePosition\VehicleStopStatus $value
     * @return \transit_realtime\VehiclePosition
     */
    public function setCurrentStatus( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <timestamp> has a value
     *
     * @return boolean
     */
    public function hasTimestamp(){
      return $this->_has(5);
    }
    
    /**
     * Clear <timestamp> value
     *
     * @return \transit_realtime\VehiclePosition
     */
    public function clearTimestamp(){
      return $this->_clear(5);
    }
    
    /**
     * Get <timestamp> value
     *
     * @return int
     */
    public function getTimestamp(){
      return $this->_get(5);
    }
    
    /**
     * Set <timestamp> value
     *
     * @param int $value
     * @return \transit_realtime\VehiclePosition
     */
    public function setTimestamp( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <congestion_level> has a value
     *
     * @return boolean
     */
    public function hasCongestionLevel(){
      return $this->_has(6);
    }
    
    /**
     * Clear <congestion_level> value
     *
     * @return \transit_realtime\VehiclePosition
     */
    public function clearCongestionLevel(){
      return $this->_clear(6);
    }
    
    /**
     * Get <congestion_level> value
     *
     * @return int - \transit_realtime\VehiclePosition\CongestionLevel
     */
    public function getCongestionLevel(){
      return $this->_get(6);
    }
    
    /**
     * Set <congestion_level> value
     *
     * @param int - \transit_realtime\VehiclePosition\CongestionLevel $value
     * @return \transit_realtime\VehiclePosition
     */
    public function setCongestionLevel( $value){
      return $this->_set(6, $value);
    }
    

    // @@protoc_insertion_point(scope_class)
    // @@protoc_insertion_point(class_transit_realtime.VehiclePosition)
  }
}

namespace transit_realtime\Alert {

  // @@protoc_insertion_point(scope_namespace)
  // @@protoc_insertion_point(namespace_transit_realtime.Alert)

  class Cause {
    const UNKNOWN_CAUSE = 1;
    const OTHER_CAUSE = 2;
    const TECHNICAL_PROBLEM = 3;
    const STRIKE = 4;
    const DEMONSTRATION = 5;
    const ACCIDENT = 6;
    const HOLIDAY = 7;
    const WEATHER = 8;
    const MAINTENANCE = 9;
    const CONSTRUCTION = 10;
    const POLICE_ACTIVITY = 11;
    const MEDICAL_EMERGENCY = 12;

    // @@protoc_insertion_point(scope_class)
    // @@protoc_insertion_point(class_transit_realtime.Alert.Cause)
  }
}
namespace transit_realtime\Alert {

  // @@protoc_insertion_point(scope_namespace)
  // @@protoc_insertion_point(namespace_transit_realtime.Alert)

  class Effect {
    const NO_SERVICE = 1;
    const REDUCED_SERVICE = 2;
    const SIGNIFICANT_DELAYS = 3;
    const DETOUR = 4;
    const ADDITIONAL_SERVICE = 5;
    const MODIFIED_SERVICE = 6;
    const OTHER_EFFECT = 7;
    const UNKNOWN_EFFECT = 8;
    const STOP_MOVED = 9;

    // @@protoc_insertion_point(scope_class)
    // @@protoc_insertion_point(class_transit_realtime.Alert.Effect)
  }
}
namespace transit_realtime {

  // @@protoc_insertion_point(scope_namespace)
  // @@protoc_insertion_point(namespace_transit_realtime)

  class Alert extends \DrSlump\Protobuf\Message {

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'transit_realtime.Alert');

      // repeated .transit_realtime.TimeRange active_period = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "active_period";
      $f->type      = 11;
      $f->rule      = 3;
      $f->reference = '\transit_realtime\TimeRange';
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_transit_realtime.Alert:active_period)
      $descriptor->addField($f);

      // repeated .transit_realtime.EntitySelector informed_entity = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "informed_entity";
      $f->type      = 11;
      $f->rule      = 3;
      $f->reference = '\transit_realtime\EntitySelector';
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_transit_realtime.Alert:informed_entity)
      $descriptor->addField($f);

      // optional .transit_realtime.Alert.Cause cause = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "cause";
      $f->type      = 14;
      $f->rule      = 1;
      $f->reference = '\transit_realtime\Alert\Cause';
      $f->default   = \transit_realtime\Alert\Cause::UNKNOWN_CAUSE;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_transit_realtime.Alert:cause)
      $descriptor->addField($f);

      // optional .transit_realtime.Alert.Effect effect = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "effect";
      $f->type      = 14;
      $f->rule      = 1;
      $f->reference = '\transit_realtime\Alert\Effect';
      $f->default   = \transit_realtime\Alert\Effect::UNKNOWN_EFFECT;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_transit_realtime.Alert:effect)
      $descriptor->addField($f);

      // optional .transit_realtime.TranslatedString url = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "url";
      $f->type      = 11;
      $f->rule      = 1;
      $f->reference = '\transit_realtime\TranslatedString';
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_transit_realtime.Alert:url)
      $descriptor->addField($f);

      // optional .transit_realtime.TranslatedString header_text = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "header_text";
      $f->type      = 11;
      $f->rule      = 1;
      $f->reference = '\transit_realtime\TranslatedString';
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_transit_realtime.Alert:header_text)
      $descriptor->addField($f);

      // optional .transit_realtime.TranslatedString description_text = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "description_text";
      $f->type      = 11;
      $f->rule      = 1;
      $f->reference = '\transit_realtime\TranslatedString';
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_transit_realtime.Alert:description_text)
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      // @@protoc_insertion_point(scope_descriptor)
      // @@protoc_insertion_point(descriptor_transit_realtime.Alert)

      return $descriptor;
    }

    /**  @var \transit_realtime\TimeRange[]  */
    public $active_period = array();
    
    /**  @var \transit_realtime\EntitySelector[]  */
    public $informed_entity = array();
    
    /**  @var int - \transit_realtime\Alert\Cause */
    public $cause = \transit_realtime\Alert\Cause::UNKNOWN_CAUSE;
    
    /**  @var int - \transit_realtime\Alert\Effect */
    public $effect = \transit_realtime\Alert\Effect::UNKNOWN_EFFECT;
    
    /**  @var \transit_realtime\TranslatedString */
    public $url = null;
    
    /**  @var \transit_realtime\TranslatedString */
    public $header_text = null;
    
    /**  @var \transit_realtime\TranslatedString */
    public $description_text = null;
    

    /**
     * Check if <active_period> has a value
     *
     * @return boolean
     */
    public function hasActivePeriod(){
      return $this->_has(1);
    }
    
    /**
     * Clear <active_period> value
     *
     * @return \transit_realtime\Alert
     */
    public function clearActivePeriod(){
      return $this->_clear(1);
    }
    
    /**
     * Get <active_period> value
     *
     * @param int $idx
     * @return \transit_realtime\TimeRange
     */
    public function getActivePeriod($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <active_period> value
     *
     * @param \transit_realtime\TimeRange $value
     * @return \transit_realtime\Alert
     */
    public function setActivePeriod(\transit_realtime\TimeRange $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <active_period>
     *
     * @return \transit_realtime\TimeRange[]
     */
    public function getActivePeriodList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <active_period>
     *
     * @param \transit_realtime\TimeRange $value
     * @return \transit_realtime\Alert
     */
    public function addActivePeriod(\transit_realtime\TimeRange $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <informed_entity> has a value
     *
     * @return boolean
     */
    public function hasInformedEntity(){
      return $this->_has(5);
    }
    
    /**
     * Clear <informed_entity> value
     *
     * @return \transit_realtime\Alert
     */
    public function clearInformedEntity(){
      return $this->_clear(5);
    }
    
    /**
     * Get <informed_entity> value
     *
     * @param int $idx
     * @return \transit_realtime\EntitySelector
     */
    public function getInformedEntity($idx = NULL){
      return $this->_get(5, $idx);
    }
    
    /**
     * Set <informed_entity> value
     *
     * @param \transit_realtime\EntitySelector $value
     * @return \transit_realtime\Alert
     */
    public function setInformedEntity(\transit_realtime\EntitySelector $value, $idx = NULL){
      return $this->_set(5, $value, $idx);
    }
    
    /**
     * Get all elements of <informed_entity>
     *
     * @return \transit_realtime\EntitySelector[]
     */
    public function getInformedEntityList(){
     return $this->_get(5);
    }
    
    /**
     * Add a new element to <informed_entity>
     *
     * @param \transit_realtime\EntitySelector $value
     * @return \transit_realtime\Alert
     */
    public function addInformedEntity(\transit_realtime\EntitySelector $value){
     return $this->_add(5, $value);
    }
    
    /**
     * Check if <cause> has a value
     *
     * @return boolean
     */
    public function hasCause(){
      return $this->_has(6);
    }
    
    /**
     * Clear <cause> value
     *
     * @return \transit_realtime\Alert
     */
    public function clearCause(){
      return $this->_clear(6);
    }
    
    /**
     * Get <cause> value
     *
     * @return int - \transit_realtime\Alert\Cause
     */
    public function getCause(){
      return $this->_get(6);
    }
    
    /**
     * Set <cause> value
     *
     * @param int - \transit_realtime\Alert\Cause $value
     * @return \transit_realtime\Alert
     */
    public function setCause( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <effect> has a value
     *
     * @return boolean
     */
    public function hasEffect(){
      return $this->_has(7);
    }
    
    /**
     * Clear <effect> value
     *
     * @return \transit_realtime\Alert
     */
    public function clearEffect(){
      return $this->_clear(7);
    }
    
    /**
     * Get <effect> value
     *
     * @return int - \transit_realtime\Alert\Effect
     */
    public function getEffect(){
      return $this->_get(7);
    }
    
    /**
     * Set <effect> value
     *
     * @param int - \transit_realtime\Alert\Effect $value
     * @return \transit_realtime\Alert
     */
    public function setEffect( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <url> has a value
     *
     * @return boolean
     */
    public function hasUrl(){
      return $this->_has(8);
    }
    
    /**
     * Clear <url> value
     *
     * @return \transit_realtime\Alert
     */
    public function clearUrl(){
      return $this->_clear(8);
    }
    
    /**
     * Get <url> value
     *
     * @return \transit_realtime\TranslatedString
     */
    public function getUrl(){
      return $this->_get(8);
    }
    
    /**
     * Set <url> value
     *
     * @param \transit_realtime\TranslatedString $value
     * @return \transit_realtime\Alert
     */
    public function setUrl(\transit_realtime\TranslatedString $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <header_text> has a value
     *
     * @return boolean
     */
    public function hasHeaderText(){
      return $this->_has(10);
    }
    
    /**
     * Clear <header_text> value
     *
     * @return \transit_realtime\Alert
     */
    public function clearHeaderText(){
      return $this->_clear(10);
    }
    
    /**
     * Get <header_text> value
     *
     * @return \transit_realtime\TranslatedString
     */
    public function getHeaderText(){
      return $this->_get(10);
    }
    
    /**
     * Set <header_text> value
     *
     * @param \transit_realtime\TranslatedString $value
     * @return \transit_realtime\Alert
     */
    public function setHeaderText(\transit_realtime\TranslatedString $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <description_text> has a value
     *
     * @return boolean
     */
    public function hasDescriptionText(){
      return $this->_has(11);
    }
    
    /**
     * Clear <description_text> value
     *
     * @return \transit_realtime\Alert
     */
    public function clearDescriptionText(){
      return $this->_clear(11);
    }
    
    /**
     * Get <description_text> value
     *
     * @return \transit_realtime\TranslatedString
     */
    public function getDescriptionText(){
      return $this->_get(11);
    }
    
    /**
     * Set <description_text> value
     *
     * @param \transit_realtime\TranslatedString $value
     * @return \transit_realtime\Alert
     */
    public function setDescriptionText(\transit_realtime\TranslatedString $value){
      return $this->_set(11, $value);
    }
    

    // @@protoc_insertion_point(scope_class)
    // @@protoc_insertion_point(class_transit_realtime.Alert)
  }
}

namespace transit_realtime {

  // @@protoc_insertion_point(scope_namespace)
  // @@protoc_insertion_point(namespace_transit_realtime)

  class TimeRange extends \DrSlump\Protobuf\Message {

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'transit_realtime.TimeRange');

      // optional  start = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "start";
      $f->type      = 4;
      $f->rule      = 1;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_transit_realtime.TimeRange:start)
      $descriptor->addField($f);

      // optional  end = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "end";
      $f->type      = 4;
      $f->rule      = 1;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_transit_realtime.TimeRange:end)
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      // @@protoc_insertion_point(scope_descriptor)
      // @@protoc_insertion_point(descriptor_transit_realtime.TimeRange)

      return $descriptor;
    }

    /**  @var int */
    public $start = null;
    
    /**  @var int */
    public $end = null;
    

    /**
     * Check if <start> has a value
     *
     * @return boolean
     */
    public function hasStart(){
      return $this->_has(1);
    }
    
    /**
     * Clear <start> value
     *
     * @return \transit_realtime\TimeRange
     */
    public function clearStart(){
      return $this->_clear(1);
    }
    
    /**
     * Get <start> value
     *
     * @return int
     */
    public function getStart(){
      return $this->_get(1);
    }
    
    /**
     * Set <start> value
     *
     * @param int $value
     * @return \transit_realtime\TimeRange
     */
    public function setStart( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <end> has a value
     *
     * @return boolean
     */
    public function hasEnd(){
      return $this->_has(2);
    }
    
    /**
     * Clear <end> value
     *
     * @return \transit_realtime\TimeRange
     */
    public function clearEnd(){
      return $this->_clear(2);
    }
    
    /**
     * Get <end> value
     *
     * @return int
     */
    public function getEnd(){
      return $this->_get(2);
    }
    
    /**
     * Set <end> value
     *
     * @param int $value
     * @return \transit_realtime\TimeRange
     */
    public function setEnd( $value){
      return $this->_set(2, $value);
    }
    

    // @@protoc_insertion_point(scope_class)
    // @@protoc_insertion_point(class_transit_realtime.TimeRange)
  }
}

namespace transit_realtime {

  // @@protoc_insertion_point(scope_namespace)
  // @@protoc_insertion_point(namespace_transit_realtime)

  class Position extends \DrSlump\Protobuf\Message {

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'transit_realtime.Position');

      // required  latitude = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "latitude";
      $f->type      = 2;
      $f->rule      = 2;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_transit_realtime.Position:latitude)
      $descriptor->addField($f);

      // required  longitude = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "longitude";
      $f->type      = 2;
      $f->rule      = 2;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_transit_realtime.Position:longitude)
      $descriptor->addField($f);

      // optional  bearing = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "bearing";
      $f->type      = 2;
      $f->rule      = 1;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_transit_realtime.Position:bearing)
      $descriptor->addField($f);

      // optional  odometer = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "odometer";
      $f->type      = 1;
      $f->rule      = 1;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_transit_realtime.Position:odometer)
      $descriptor->addField($f);

      // optional  speed = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "speed";
      $f->type      = 2;
      $f->rule      = 1;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_transit_realtime.Position:speed)
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      // @@protoc_insertion_point(scope_descriptor)
      // @@protoc_insertion_point(descriptor_transit_realtime.Position)

      return $descriptor;
    }

    /**  @var float */
    public $latitude = null;
    
    /**  @var float */
    public $longitude = null;
    
    /**  @var float */
    public $bearing = null;
    
    /**  @var float */
    public $odometer = null;
    
    /**  @var float */
    public $speed = null;
    

    /**
     * Check if <latitude> has a value
     *
     * @return boolean
     */
    public function hasLatitude(){
      return $this->_has(1);
    }
    
    /**
     * Clear <latitude> value
     *
     * @return \transit_realtime\Position
     */
    public function clearLatitude(){
      return $this->_clear(1);
    }
    
    /**
     * Get <latitude> value
     *
     * @return float
     */
    public function getLatitude(){
      return $this->_get(1);
    }
    
    /**
     * Set <latitude> value
     *
     * @param float $value
     * @return \transit_realtime\Position
     */
    public function setLatitude( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <longitude> has a value
     *
     * @return boolean
     */
    public function hasLongitude(){
      return $this->_has(2);
    }
    
    /**
     * Clear <longitude> value
     *
     * @return \transit_realtime\Position
     */
    public function clearLongitude(){
      return $this->_clear(2);
    }
    
    /**
     * Get <longitude> value
     *
     * @return float
     */
    public function getLongitude(){
      return $this->_get(2);
    }
    
    /**
     * Set <longitude> value
     *
     * @param float $value
     * @return \transit_realtime\Position
     */
    public function setLongitude( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <bearing> has a value
     *
     * @return boolean
     */
    public function hasBearing(){
      return $this->_has(3);
    }
    
    /**
     * Clear <bearing> value
     *
     * @return \transit_realtime\Position
     */
    public function clearBearing(){
      return $this->_clear(3);
    }
    
    /**
     * Get <bearing> value
     *
     * @return float
     */
    public function getBearing(){
      return $this->_get(3);
    }
    
    /**
     * Set <bearing> value
     *
     * @param float $value
     * @return \transit_realtime\Position
     */
    public function setBearing( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <odometer> has a value
     *
     * @return boolean
     */
    public function hasOdometer(){
      return $this->_has(4);
    }
    
    /**
     * Clear <odometer> value
     *
     * @return \transit_realtime\Position
     */
    public function clearOdometer(){
      return $this->_clear(4);
    }
    
    /**
     * Get <odometer> value
     *
     * @return float
     */
    public function getOdometer(){
      return $this->_get(4);
    }
    
    /**
     * Set <odometer> value
     *
     * @param float $value
     * @return \transit_realtime\Position
     */
    public function setOdometer( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <speed> has a value
     *
     * @return boolean
     */
    public function hasSpeed(){
      return $this->_has(5);
    }
    
    /**
     * Clear <speed> value
     *
     * @return \transit_realtime\Position
     */
    public function clearSpeed(){
      return $this->_clear(5);
    }
    
    /**
     * Get <speed> value
     *
     * @return float
     */
    public function getSpeed(){
      return $this->_get(5);
    }
    
    /**
     * Set <speed> value
     *
     * @param float $value
     * @return \transit_realtime\Position
     */
    public function setSpeed( $value){
      return $this->_set(5, $value);
    }
    

    // @@protoc_insertion_point(scope_class)
    // @@protoc_insertion_point(class_transit_realtime.Position)
  }
}

namespace transit_realtime\TripDescriptor {

  // @@protoc_insertion_point(scope_namespace)
  // @@protoc_insertion_point(namespace_transit_realtime.TripDescriptor)

  class ScheduleRelationship {
    const SCHEDULED = 0;
    const ADDED = 1;
    const UNSCHEDULED = 2;
    const CANCELED = 3;
    const REPLACEMENT = 5;

    // @@protoc_insertion_point(scope_class)
    // @@protoc_insertion_point(class_transit_realtime.TripDescriptor.ScheduleRelationship)
  }
}
namespace transit_realtime {

  // @@protoc_insertion_point(scope_namespace)
  // @@protoc_insertion_point(namespace_transit_realtime)

  class TripDescriptor extends \DrSlump\Protobuf\Message {

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'transit_realtime.TripDescriptor');

      // optional  trip_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "trip_id";
      $f->type      = 9;
      $f->rule      = 1;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_transit_realtime.TripDescriptor:trip_id)
      $descriptor->addField($f);

      // optional  route_id = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "route_id";
      $f->type      = 9;
      $f->rule      = 1;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_transit_realtime.TripDescriptor:route_id)
      $descriptor->addField($f);

      // optional  start_time = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "start_time";
      $f->type      = 9;
      $f->rule      = 1;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_transit_realtime.TripDescriptor:start_time)
      $descriptor->addField($f);

      // optional  start_date = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "start_date";
      $f->type      = 9;
      $f->rule      = 1;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_transit_realtime.TripDescriptor:start_date)
      $descriptor->addField($f);

      // optional .transit_realtime.TripDescriptor.ScheduleRelationship schedule_relationship = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "schedule_relationship";
      $f->type      = 14;
      $f->rule      = 1;
      $f->reference = '\transit_realtime\TripDescriptor\ScheduleRelationship';
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_transit_realtime.TripDescriptor:schedule_relationship)
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      // @@protoc_insertion_point(scope_descriptor)
      // @@protoc_insertion_point(descriptor_transit_realtime.TripDescriptor)

      return $descriptor;
    }

    /**  @var string */
    public $trip_id = null;
    
    /**  @var string */
    public $route_id = null;
    
    /**  @var string */
    public $start_time = null;
    
    /**  @var string */
    public $start_date = null;
    
    /**  @var int - \transit_realtime\TripDescriptor\ScheduleRelationship */
    public $schedule_relationship = null;
    

    /**
     * Check if <trip_id> has a value
     *
     * @return boolean
     */
    public function hasTripId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <trip_id> value
     *
     * @return \transit_realtime\TripDescriptor
     */
    public function clearTripId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <trip_id> value
     *
     * @return string
     */
    public function getTripId(){
      return $this->_get(1);
    }
    
    /**
     * Set <trip_id> value
     *
     * @param string $value
     * @return \transit_realtime\TripDescriptor
     */
    public function setTripId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <route_id> has a value
     *
     * @return boolean
     */
    public function hasRouteId(){
      return $this->_has(5);
    }
    
    /**
     * Clear <route_id> value
     *
     * @return \transit_realtime\TripDescriptor
     */
    public function clearRouteId(){
      return $this->_clear(5);
    }
    
    /**
     * Get <route_id> value
     *
     * @return string
     */
    public function getRouteId(){
      return $this->_get(5);
    }
    
    /**
     * Set <route_id> value
     *
     * @param string $value
     * @return \transit_realtime\TripDescriptor
     */
    public function setRouteId( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <start_time> has a value
     *
     * @return boolean
     */
    public function hasStartTime(){
      return $this->_has(2);
    }
    
    /**
     * Clear <start_time> value
     *
     * @return \transit_realtime\TripDescriptor
     */
    public function clearStartTime(){
      return $this->_clear(2);
    }
    
    /**
     * Get <start_time> value
     *
     * @return string
     */
    public function getStartTime(){
      return $this->_get(2);
    }
    
    /**
     * Set <start_time> value
     *
     * @param string $value
     * @return \transit_realtime\TripDescriptor
     */
    public function setStartTime( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <start_date> has a value
     *
     * @return boolean
     */
    public function hasStartDate(){
      return $this->_has(3);
    }
    
    /**
     * Clear <start_date> value
     *
     * @return \transit_realtime\TripDescriptor
     */
    public function clearStartDate(){
      return $this->_clear(3);
    }
    
    /**
     * Get <start_date> value
     *
     * @return string
     */
    public function getStartDate(){
      return $this->_get(3);
    }
    
    /**
     * Set <start_date> value
     *
     * @param string $value
     * @return \transit_realtime\TripDescriptor
     */
    public function setStartDate( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <schedule_relationship> has a value
     *
     * @return boolean
     */
    public function hasScheduleRelationship(){
      return $this->_has(4);
    }
    
    /**
     * Clear <schedule_relationship> value
     *
     * @return \transit_realtime\TripDescriptor
     */
    public function clearScheduleRelationship(){
      return $this->_clear(4);
    }
    
    /**
     * Get <schedule_relationship> value
     *
     * @return int - \transit_realtime\TripDescriptor\ScheduleRelationship
     */
    public function getScheduleRelationship(){
      return $this->_get(4);
    }
    
    /**
     * Set <schedule_relationship> value
     *
     * @param int - \transit_realtime\TripDescriptor\ScheduleRelationship $value
     * @return \transit_realtime\TripDescriptor
     */
    public function setScheduleRelationship( $value){
      return $this->_set(4, $value);
    }
    

    // @@protoc_insertion_point(scope_class)
    // @@protoc_insertion_point(class_transit_realtime.TripDescriptor)
  }
}

namespace transit_realtime {

  // @@protoc_insertion_point(scope_namespace)
  // @@protoc_insertion_point(namespace_transit_realtime)

  class VehicleDescriptor extends \DrSlump\Protobuf\Message {

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'transit_realtime.VehicleDescriptor');

      // optional  id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = 9;
      $f->rule      = 1;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_transit_realtime.VehicleDescriptor:id)
      $descriptor->addField($f);

      // optional  label = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "label";
      $f->type      = 9;
      $f->rule      = 1;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_transit_realtime.VehicleDescriptor:label)
      $descriptor->addField($f);

      // optional  license_plate = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "license_plate";
      $f->type      = 9;
      $f->rule      = 1;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_transit_realtime.VehicleDescriptor:license_plate)
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      // @@protoc_insertion_point(scope_descriptor)
      // @@protoc_insertion_point(descriptor_transit_realtime.VehicleDescriptor)

      return $descriptor;
    }

    /**  @var string */
    public $id = null;
    
    /**  @var string */
    public $label = null;
    
    /**  @var string */
    public $license_plate = null;
    

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \transit_realtime\VehicleDescriptor
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return string
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param string $value
     * @return \transit_realtime\VehicleDescriptor
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <label> has a value
     *
     * @return boolean
     */
    public function hasLabel(){
      return $this->_has(2);
    }
    
    /**
     * Clear <label> value
     *
     * @return \transit_realtime\VehicleDescriptor
     */
    public function clearLabel(){
      return $this->_clear(2);
    }
    
    /**
     * Get <label> value
     *
     * @return string
     */
    public function getLabel(){
      return $this->_get(2);
    }
    
    /**
     * Set <label> value
     *
     * @param string $value
     * @return \transit_realtime\VehicleDescriptor
     */
    public function setLabel( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <license_plate> has a value
     *
     * @return boolean
     */
    public function hasLicensePlate(){
      return $this->_has(3);
    }
    
    /**
     * Clear <license_plate> value
     *
     * @return \transit_realtime\VehicleDescriptor
     */
    public function clearLicensePlate(){
      return $this->_clear(3);
    }
    
    /**
     * Get <license_plate> value
     *
     * @return string
     */
    public function getLicensePlate(){
      return $this->_get(3);
    }
    
    /**
     * Set <license_plate> value
     *
     * @param string $value
     * @return \transit_realtime\VehicleDescriptor
     */
    public function setLicensePlate( $value){
      return $this->_set(3, $value);
    }
    

    // @@protoc_insertion_point(scope_class)
    // @@protoc_insertion_point(class_transit_realtime.VehicleDescriptor)
  }
}

namespace transit_realtime {

  // @@protoc_insertion_point(scope_namespace)
  // @@protoc_insertion_point(namespace_transit_realtime)

  class EntitySelector extends \DrSlump\Protobuf\Message {

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'transit_realtime.EntitySelector');

      // optional  agency_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "agency_id";
      $f->type      = 9;
      $f->rule      = 1;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_transit_realtime.EntitySelector:agency_id)
      $descriptor->addField($f);

      // optional  route_id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "route_id";
      $f->type      = 9;
      $f->rule      = 1;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_transit_realtime.EntitySelector:route_id)
      $descriptor->addField($f);

      // optional  route_type = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "route_type";
      $f->type      = 5;
      $f->rule      = 1;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_transit_realtime.EntitySelector:route_type)
      $descriptor->addField($f);

      // optional .transit_realtime.TripDescriptor trip = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "trip";
      $f->type      = 11;
      $f->rule      = 1;
      $f->reference = '\transit_realtime\TripDescriptor';
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_transit_realtime.EntitySelector:trip)
      $descriptor->addField($f);

      // optional  stop_id = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "stop_id";
      $f->type      = 9;
      $f->rule      = 1;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_transit_realtime.EntitySelector:stop_id)
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      // @@protoc_insertion_point(scope_descriptor)
      // @@protoc_insertion_point(descriptor_transit_realtime.EntitySelector)

      return $descriptor;
    }

    /**  @var string */
    public $agency_id = null;
    
    /**  @var string */
    public $route_id = null;
    
    /**  @var int */
    public $route_type = null;
    
    /**  @var \transit_realtime\TripDescriptor */
    public $trip = null;
    
    /**  @var string */
    public $stop_id = null;
    

    /**
     * Check if <agency_id> has a value
     *
     * @return boolean
     */
    public function hasAgencyId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <agency_id> value
     *
     * @return \transit_realtime\EntitySelector
     */
    public function clearAgencyId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <agency_id> value
     *
     * @return string
     */
    public function getAgencyId(){
      return $this->_get(1);
    }
    
    /**
     * Set <agency_id> value
     *
     * @param string $value
     * @return \transit_realtime\EntitySelector
     */
    public function setAgencyId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <route_id> has a value
     *
     * @return boolean
     */
    public function hasRouteId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <route_id> value
     *
     * @return \transit_realtime\EntitySelector
     */
    public function clearRouteId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <route_id> value
     *
     * @return string
     */
    public function getRouteId(){
      return $this->_get(2);
    }
    
    /**
     * Set <route_id> value
     *
     * @param string $value
     * @return \transit_realtime\EntitySelector
     */
    public function setRouteId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <route_type> has a value
     *
     * @return boolean
     */
    public function hasRouteType(){
      return $this->_has(3);
    }
    
    /**
     * Clear <route_type> value
     *
     * @return \transit_realtime\EntitySelector
     */
    public function clearRouteType(){
      return $this->_clear(3);
    }
    
    /**
     * Get <route_type> value
     *
     * @return int
     */
    public function getRouteType(){
      return $this->_get(3);
    }
    
    /**
     * Set <route_type> value
     *
     * @param int $value
     * @return \transit_realtime\EntitySelector
     */
    public function setRouteType( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <trip> has a value
     *
     * @return boolean
     */
    public function hasTrip(){
      return $this->_has(4);
    }
    
    /**
     * Clear <trip> value
     *
     * @return \transit_realtime\EntitySelector
     */
    public function clearTrip(){
      return $this->_clear(4);
    }
    
    /**
     * Get <trip> value
     *
     * @return \transit_realtime\TripDescriptor
     */
    public function getTrip(){
      return $this->_get(4);
    }
    
    /**
     * Set <trip> value
     *
     * @param \transit_realtime\TripDescriptor $value
     * @return \transit_realtime\EntitySelector
     */
    public function setTrip(\transit_realtime\TripDescriptor $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <stop_id> has a value
     *
     * @return boolean
     */
    public function hasStopId(){
      return $this->_has(5);
    }
    
    /**
     * Clear <stop_id> value
     *
     * @return \transit_realtime\EntitySelector
     */
    public function clearStopId(){
      return $this->_clear(5);
    }
    
    /**
     * Get <stop_id> value
     *
     * @return string
     */
    public function getStopId(){
      return $this->_get(5);
    }
    
    /**
     * Set <stop_id> value
     *
     * @param string $value
     * @return \transit_realtime\EntitySelector
     */
    public function setStopId( $value){
      return $this->_set(5, $value);
    }
    

    // @@protoc_insertion_point(scope_class)
    // @@protoc_insertion_point(class_transit_realtime.EntitySelector)
  }
}

namespace transit_realtime\TranslatedString {

  // @@protoc_insertion_point(scope_namespace)
  // @@protoc_insertion_point(namespace_transit_realtime.TranslatedString)

  class Translation extends \DrSlump\Protobuf\Message {

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'transit_realtime.TranslatedString.Translation');

      // required  text = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "text";
      $f->type      = 9;
      $f->rule      = 2;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_transit_realtime.TranslatedString.Translation:text)
      $descriptor->addField($f);

      // optional  language = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "language";
      $f->type      = 9;
      $f->rule      = 1;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_transit_realtime.TranslatedString.Translation:language)
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      // @@protoc_insertion_point(scope_descriptor)
      // @@protoc_insertion_point(descriptor_transit_realtime.TranslatedString.Translation)

      return $descriptor;
    }

    /**  @var string */
    public $text = null;
    
    /**  @var string */
    public $language = null;
    

    /**
     * Check if <text> has a value
     *
     * @return boolean
     */
    public function hasText(){
      return $this->_has(1);
    }
    
    /**
     * Clear <text> value
     *
     * @return \transit_realtime\TranslatedString\Translation
     */
    public function clearText(){
      return $this->_clear(1);
    }
    
    /**
     * Get <text> value
     *
     * @return string
     */
    public function getText(){
      return $this->_get(1);
    }
    
    /**
     * Set <text> value
     *
     * @param string $value
     * @return \transit_realtime\TranslatedString\Translation
     */
    public function setText( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <language> has a value
     *
     * @return boolean
     */
    public function hasLanguage(){
      return $this->_has(2);
    }
    
    /**
     * Clear <language> value
     *
     * @return \transit_realtime\TranslatedString\Translation
     */
    public function clearLanguage(){
      return $this->_clear(2);
    }
    
    /**
     * Get <language> value
     *
     * @return string
     */
    public function getLanguage(){
      return $this->_get(2);
    }
    
    /**
     * Set <language> value
     *
     * @param string $value
     * @return \transit_realtime\TranslatedString\Translation
     */
    public function setLanguage( $value){
      return $this->_set(2, $value);
    }
    

    // @@protoc_insertion_point(scope_class)
    // @@protoc_insertion_point(class_transit_realtime.TranslatedString.Translation)
  }
}

namespace transit_realtime {

  // @@protoc_insertion_point(scope_namespace)
  // @@protoc_insertion_point(namespace_transit_realtime)

  class TranslatedString extends \DrSlump\Protobuf\Message {

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'transit_realtime.TranslatedString');

      // repeated .transit_realtime.TranslatedString.Translation translation = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "translation";
      $f->type      = 11;
      $f->rule      = 3;
      $f->reference = '\transit_realtime\TranslatedString\Translation';
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_transit_realtime.TranslatedString:translation)
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      // @@protoc_insertion_point(scope_descriptor)
      // @@protoc_insertion_point(descriptor_transit_realtime.TranslatedString)

      return $descriptor;
    }

    /**  @var \transit_realtime\TranslatedString\Translation[]  */
    public $translation = array();
    

    /**
     * Check if <translation> has a value
     *
     * @return boolean
     */
    public function hasTranslation(){
      return $this->_has(1);
    }
    
    /**
     * Clear <translation> value
     *
     * @return \transit_realtime\TranslatedString
     */
    public function clearTranslation(){
      return $this->_clear(1);
    }
    
    /**
     * Get <translation> value
     *
     * @param int $idx
     * @return \transit_realtime\TranslatedString\Translation
     */
    public function getTranslation($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <translation> value
     *
     * @param \transit_realtime\TranslatedString\Translation $value
     * @return \transit_realtime\TranslatedString
     */
    public function setTranslation(\transit_realtime\TranslatedString\Translation $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <translation>
     *
     * @return \transit_realtime\TranslatedString\Translation[]
     */
    public function getTranslationList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <translation>
     *
     * @param \transit_realtime\TranslatedString\Translation $value
     * @return \transit_realtime\TranslatedString
     */
    public function addTranslation(\transit_realtime\TranslatedString\Translation $value){
     return $this->_add(1, $value);
    }
    

    // @@protoc_insertion_point(scope_class)
    // @@protoc_insertion_point(class_transit_realtime.TranslatedString)
  }
}

